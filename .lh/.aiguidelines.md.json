{
    "sourceFile": ".aiguidelines.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1735347897542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735348327119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,42 @@\n # AI Development Guidelines for DirectAmelia\n \n-## File Naming\n-Name this file `.AI-GUIDELINES.md` in the project root directory.\n-\n ## Core Development Rules\n \n-### 1. Code Structure and Organization\n-- Follow Clean Architecture principles\n-- Implement SOLID design principles\n-- Use Domain-Driven Design (DDD) patterns where appropriate\n+### 1. .NET Development Guidelines\n+\n+#### Core Development Practices\n+- Utilize latest .NET features and C# language capabilities\n+- Implement Clean Architecture principles\n+- Follow SOLID design principles\n+- Apply Domain-Driven Design patterns\n+- Use dependency injection (Microsoft.Extensions.DependencyInjection)\n+- Implement repository pattern with Entity Framework Core\n+- Utilize async/await patterns consistently\n+\n+#### NuGet Package Integration\n+- Freedom to suggest and implement any relevant NuGet packages\n+- Document package selection rationale\n+- Maintain package version compatibility\n+- Consider security implications\n+- Evaluate performance impact\n+- Assess licensing requirements\n+\n+#### Microsoft Stack Integration\n+- Leverage Azure services effectively\n+- Utilize Microsoft Identity Platform\n+- Implement Microsoft.Extensions libraries\n+- Use Microsoft.Configuration patterns\n+- Follow Microsoft Security best practices\n+- Integrate with Microsoft logging standards\n+\n+#### Code Organization\n+- Follow standard .NET solution structure\n+- Implement proper namespace organization\n+- Use feature folders where appropriate\n - Maintain clear separation of concerns\n-- Implement repository pattern for data access\n-- Use dependency injection for loose coupling\n+- Follow Microsoft naming conventions\n+- Use standard .NET project templates\n \n ### 2. Coding Standards\n - Follow Microsoft's .NET coding conventions\n - Use PascalCase for public members and classes\n@@ -67,8 +91,37 @@\n - Document configuration requirements\n - Maintain changelog\n - Document deployment procedures\n \n+### 9. Hosting & Database Requirements\n+\n+#### Vercel Deployment Considerations\n+- Design for serverless architecture\n+- Optimize for Vercel edge network\n+- Implement proper environment configuration\n+- Follow Vercel deployment best practices\n+- Configure build and deployment scripts\n+- Optimize for cold starts\n+- Implement proper caching strategies\n+\n+#### MongoDB Integration\n+- Use MongoDB.Driver NuGet package\n+- Implement repository pattern for MongoDB\n+- Design proper indexing strategy\n+- Implement connection resilience\n+- Configure proper security settings\n+- Optimize query performance\n+- Handle MongoDB transactions\n+\n+#### Infrastructure Patterns\n+- Design for serverless architecture\n+- Implement proper caching\n+- Configure session management\n+- Handle distributed state\n+- Implement proper logging\n+- Design for scalability\n+- Monitor performance\n+\n ## AI Response Format\n \n ### When Providing Code:\n ```markdown\n"
                }
            ],
            "date": 1735347897542,
            "name": "Commit-0",
            "content": "# AI Development Guidelines for DirectAmelia\n\n## File Naming\nName this file `.AI-GUIDELINES.md` in the project root directory.\n\n## Core Development Rules\n\n### 1. Code Structure and Organization\n- Follow Clean Architecture principles\n- Implement SOLID design principles\n- Use Domain-Driven Design (DDD) patterns where appropriate\n- Maintain clear separation of concerns\n- Implement repository pattern for data access\n- Use dependency injection for loose coupling\n\n### 2. Coding Standards\n- Follow Microsoft's .NET coding conventions\n- Use PascalCase for public members and classes\n- Use camelCase for private fields\n- Prefix interface names with 'I'\n- Include XML documentation for public APIs\n- Implement async/await patterns correctly\n- Use nullable reference types\n\n### 3. Project Structure\n- Organize solutions into logical project layers:\n  - DirectAmelia.Core (domain models, interfaces)\n  - DirectAmelia.Infrastructure (data access, external services)\n  - DirectAmelia.Application (business logic, services)\n  - DirectAmelia.API (web API endpoints)\n  - DirectAmelia.Web (Blazor frontend)\n  - DirectAmelia.Tests (unit, integration tests)\n\n### 4. Error Handling\n- Implement global exception handling\n- Use custom exception types for domain-specific errors\n- Include appropriate logging\n- Return meaningful error messages\n- Handle both synchronous and asynchronous errors\n\n### 5. Security Practices\n- Implement input validation\n- Use parameterized queries\n- Encrypt sensitive data\n- Implement proper authentication/authorization\n- Follow OWASP security guidelines\n- Use secure communication protocols\n\n### 6. Testing Requirements\n- Write unit tests for business logic\n- Include integration tests for API endpoints\n- Achieve minimum 80% code coverage\n- Implement end-to-end testing\n- Use testing naming convention: [UnitOfWork_Scenario_ExpectedBehavior]\n\n### 7. Performance Guidelines\n- Implement caching where appropriate\n- Use async/await for I/O operations\n- Optimize database queries\n- Implement pagination for large datasets\n- Profile and optimize critical paths\n\n### 8. Documentation Standards\n- Include README.md in each project\n- Document all public APIs\n- Include code examples\n- Document configuration requirements\n- Maintain changelog\n- Document deployment procedures\n\n## AI Response Format\n\n### When Providing Code:\n```markdown\n## Component: [Component Name]\n## Purpose: [Brief Description]\n\n### Implementation Details:\n[Technical details and considerations]\n\n### Code:\n```csharp\n[Properly formatted C# code]\n```\n\n### Dependencies:\n- [List required NuGet packages]\n- [List required services]\n\n### Usage Example:\n```csharp\n[Example code showing usage]\n```\n```\n\n### When Providing Architecture Guidance:\n```markdown\n## Architecture Decision: [Topic]\n## Context: [Background Information]\n\n### Considerations:\n- [List key considerations]\n\n### Recommendation:\n[Detailed recommendation]\n\n### Implementation Steps:\n1. [Step-by-step guide]\n```\n\n### When Answering Questions:\n```markdown\n## Question Topic: [Topic]\n## Understanding: [Restate the question to confirm understanding]\n\n### Answer:\n[Detailed response]\n\n### Additional Considerations:\n- [Related points to consider]\n```\n\n## AI Constraints\n\n1. Always Provide:\n   - Complete, working code solutions\n   - Error handling\n   - Input validation\n   - Proper documentation\n   - Test considerations\n\n2. Never:\n   - Skip error handling\n   - Ignore security implications\n   - Leave implementation details ambiguous\n   - Provide partial solutions without context\n   - Ignore performance implications\n\n3. Security Requirements:\n   - Always consider OWASP Top 10\n   - Implement proper authentication\n   - Use secure communication\n   - Protect sensitive data\n   - Implement audit logging\n\n4. Performance Requirements:\n   - Consider scalability\n   - Implement caching strategies\n   - Use async operations appropriately\n   - Consider database optimization\n   - Handle resource cleanup\n\n## Versioning and Updates\n\n### Version Control\n- Use semantic versioning\n- Maintain CHANGELOG.md\n- Document breaking changes\n- Include migration guides\n- Tag releases appropriately\n\n### Deployment Considerations\n- Provide deployment scripts\n- Include configuration templates\n- Document environment requirements\n- Include rollback procedures\n- Specify monitoring requirements\n\n## Best Practices Enforcement\n\n1. Code Quality:\n   - Use static code analysis\n   - Implement code reviews\n   - Follow style guides\n   - Use code formatting tools\n   - Maintain consistency\n\n2. Architecture:\n   - Follow microservices principles\n   - Implement event-driven patterns\n   - Use message queues for async operations\n   - Implement retry policies\n   - Handle distributed transactions\n\n3. Testing:\n   - Write testable code\n   - Use mocking frameworks\n   - Implement integration tests\n   - Use test data builders\n   - Implement continuous testing\n\n4. Monitoring:\n   - Implement health checks\n   - Use proper logging\n   - Monitor performance metrics\n   - Set up alerts\n   - Track error rates\n\n## Feedback Loop\n\nThe AI should:\n1. Request clarification when requirements are unclear\n2. Suggest improvements to proposed solutions\n3. Highlight potential issues or concerns\n4. Provide alternative approaches when appropriate\n5. Include relevant reference documentation"
        }
    ]
}